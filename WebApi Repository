/** customize you model */
namespace VendorName\ModuleName\Model;

use VendorName\ModuleName\Api\Data\ModelClassNameInterface;
use VendorName\ModuleName\Model\ModelClassNameFactory;
use VendorName\ModuleName\Model\ResourceModel\ModelClassName as Resource;
use VendorName\ModuleName\Model\ResourceModel\ModelClassName\CollectionFactory;
/** customize you model */

use Magento\Framework\App\RequestInterface;
use Magento\Framework\Api\Search\SearchResultFactory as BaseSearchResultFactory;
use Magento\Framework\Api\SearchCriteria\CollectionProcessorInterface;
use Magento\Framework\Exception\CouldNotDeleteException;
use Magento\Framework\Exception\CouldNotSaveException;
use Magento\Framework\Exception\LocalizedException;
use Magento\Framework\Exception\NoSuchEntityException;

class ModelClassNameRepository implements \VendorName\ModuleName\Api\Data\ModelClassNameRepositoryInterface
{
    protected $modelFactory;

    protected $collectionFactory;

    protected $request;

    protected $resource;

    protected $searchResultFactory;

    protected $collectionProcessor;

    public function __construct(
        Resource $resource,
        ModelClassName $modelFactory,
        CollectionFactory $collectionFactory,
        RequestInterface $request,
        BaseSearchResultFactory $searchResultFactory,
        CollectionProcessorInterface $collectionProcessor
    )
    {
        $this->request             = $request;
        $this->resource            = $resource;
        $this->modelFactory        = $modelFactory;
        $this->collectionFactory   = $collectionFactory;
        $this->collectionProcessor = $collectionProcessor;
        $this->searchResultFactory = $searchResultFactory;
    }



    public function getList(\Magento\Framework\Api\SearchCriteriaInterface $searchCriteria)
    {
        $collection = $this->collectionFactory->create();

        $this->collectionProcessor->process($searchCriteria, $collection);

        $searchResult = $this->searchResultFactory->create();
        $searchResult->setSearchCriteria($searchCriteria);
        $searchResult->setItems($collection->getItems());
        $searchResult->setTotalCount($collection->getSize());
        return $searchResult;
    }

    public function save(ModelClassNameInterface $model)
    {
        try {
            if(!$model->getId()){
                /** unset (0) id to save new entity */
                $model->setId(null);
            }else{
                /** catch exception if entity not exist */
                $this->getById($model->getId());
            }
            $this->resource->save($model);
        } catch (LocalizedException $exception) {
            throw new CouldNotSaveException(
                __('Could not save the entity, reason: %1', $exception->getMessage()),
                $exception
            );
        } catch (\Throwable $exception) {
            throw new CouldNotSaveException(
                __('Could not save the model, reason:  %1', __('Something went wrong while saving the model.')),
                $exception
            );
        }
        return true;
    }

    public function delete(ModelClassNameInterface $model)
    {
        try {
            $this->resource->delete($model);
        } catch (\Exception $exception) {
            throw new CouldNotDeleteException(
                __('Could not delete model, reason:  %1', $exception->getMessage())
            );
        }
        return true;
    }

    public function deleteById($id)
    {
        return $this->delete($this->getById($id));
    }

    public function getById($id)
    {
        $modelFactory = $this->modelFactory->create();
        $modelFactory->load($id);
        if (!$modelFactory->getId()) {
            throw new NoSuchEntityException(__('Could not get model , reason: model ' . $id . ' doesn\'t exist.', $modelFactory));
        }
        return $modelFactory;
    }
}
